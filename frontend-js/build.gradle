import com.google.javascript.jscomp.CompilerOptions

apply plugin: 'kotlin2js'
apply plugin: 'kotlin-dce-js'
apply plugin: "com.eriwen.gradle.js"
apply plugin: 'com.moowork.node'


dependencies {
    compile project(':common-js')
    compile libraries.kotlin_stdlib_js
    testCompile libraries.kotlin_test_js
}

[compileKotlin2Js, compileTestKotlin2Js]*.configure {
    kotlinOptions.moduleKind = "umd"
    kotlinOptions.sourceMap = true
    kotlinOptions.sourceMapEmbedSources = "always"
}

combineJs {
    source = [
            // The order is important. That's why the documented way with a reference to a source set using wildcards
            // is not used.
            "${buildDir}/kotlin-js-min/main/kotlin.js",
            "${buildDir}/kotlin-js-min/main/kotlin-multiplatform-atlas-js.js",
            "${buildDir}/kotlin-js-min/main/js-app.js"
    ]
    dest = file("${temporaryDir}/${archivesBaseName}-combined.js")
}

minifyJs {
    source = combineJs
    dest = file("${temporaryDir}/${archivesBaseName}-minified.js")
    closure {
        compilerOptions = new CompilerOptions().with {
            setLanguage(CompilerOptions.LanguageMode.ECMASCRIPT5)
            return it
        }
    }
}

combineJs.dependsOn runDceKotlinJs
build.dependsOn minifyJs

task minifiedJar(type: Jar) {
    classifier = 'minified'
    from minifyJs
}

task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
    from compileKotlin2Js.destinationDir

    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }

    into "${buildDir}/node_modules"
}

node {
    version = nodeVersion
    download = true
}

task installQunit(type: NpmTask) {
    inputs.property('qunitVersion', qunitVersion)
    outputs.dir file('node_modules/qunit')

    args = ['install', "qunit@${qunitVersion}"]
}

task runQunit(type: NodeTask, dependsOn: [compileTestKotlin2Js, populateNodeModules, installQunit]) {
    script = file('node_modules/qunit/bin/qunit')
    args = [projectDir.toPath().relativize(file(compileTestKotlin2Js.outputFile).toPath())]
}

test.dependsOn runQunit

artifacts {
    archives minifiedJar
}
